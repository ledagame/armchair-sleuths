{
  "enabled": true,
  "name": "Codify on Project Complete",
  "description": "Automatically extracts learnings when projects complete and saves them to the knowledge base",
  "version": "1",
  "when": {
    "type": "manual"
  },
  "then": {
    "type": "askAgent",
    "prompt": "The user has declared the project complete. Extract and codify learnings using the Compounding Engineering system:\n\n## Codification Process\n\n### 1. Project Analysis\nCollect project information:\n- Project name\n- Domain (authentication, payment, analytics, etc.)\n- Tech stack used\n- Development duration\n- Team size\n\n### 2. Success Pattern Extraction\nAnalyze Git history and code to identify successful patterns:\n\n**Analysis targets:**\n- Frequently used architecture patterns\n- Effective libraries/frameworks\n- Well-functioning code structures\n- Successful testing strategies\n\n**Extraction format:**\n```markdown\n## Success Patterns\n\n### 1. JWT + Refresh Token Authentication\n- **Location**: src/server/auth/\n- **Effect**: High security and good UX\n- **Reusable**: ✅ Yes\n- **Rating**: ⭐⭐⭐⭐⭐\n\n### 2. Repository Pattern\n- **Location**: src/server/repositories/\n- **Effect**: Easy testing, easy DB switching\n- **Reusable**: ✅ Yes\n- **Rating**: ⭐⭐⭐⭐\n```\n\n### 3. Issue Analysis\nAnalyze Git commits, PR comments, and issue tracker:\n\n**Analysis targets:**\n- Frequently occurring bugs\n- Performance problems\n- Security vulnerabilities\n- Integration issues\n\n**Extraction format:**\n```markdown\n## Issues Encountered\n\n### 1. Rate Limiting Initially Missing\n- **When**: Week 2\n- **Cause**: Not in checklist\n- **Solution**: Added express-rate-limit\n- **Time spent**: 2 hours\n- **Lesson**: Include rate limiting from start for public APIs\n- **Added to checklist**: ✅\n\n### 2. N+1 Query Problem\n- **When**: Week 3\n- **Cause**: Not using eager loading\n- **Solution**: Changed to JOIN queries\n- **Time spent**: 4 hours\n- **Lesson**: Always check for N+1 when querying relational data\n- **Added to checklist**: ✅\n```\n\n### 4. Improvement Identification\nReflect on what could be better next time:\n\n```markdown\n## Apply to Next Project\n\n### Immediate Application (Must Have)\n1. Include rate limiting from the start\n2. Check for N+1 queries early in development\n3. Include security checklist when breaking down tasks\n\n### Considerations (Should Have)\n1. Make 2FA default instead of optional\n2. Start integration testing earlier\n3. Set up performance monitoring from the beginning\n\n### Experiments (Nice to Have)\n1. Consider adopting GraphQL\n2. Consider microservices architecture\n3. Experiment with event-driven patterns\n```\n\n### 5. Metrics Collection\nMeasure project performance:\n\n```markdown\n## Metrics\n\n### Development Efficiency\n- Setup Time: 45min (previous: 2hr, -62%)\n- Issues Found: 8 (previous: 15, -47%)\n- Time to Fix: 3hr (previous: 8hr, -62%)\n- Total Time: 28hr (previous: 40hr, -30%)\n\n### Code Quality\n- Test Coverage: 85%\n- Code Review Issues: 12\n- Security Vulnerabilities: 0\n- Performance Issues: 2\n\n### Team Satisfaction\n- Developer Experience: 4.5/5\n- Code Maintainability: 4.2/5\n- Documentation Quality: 4.0/5\n```\n\n### 6. Create Learning File\nCreate new file in `.kiro/steering/learnings/`:\n\n**Filename format:**\n```\nYYYY-MM-DD-project-name.md\nExample: 2025-01-14-auth-system.md\n```\n\n**File content structure:**\n```markdown\n---\nname: auth-system-learning\nproject: User Authentication System\ndomain: authentication\ndate: 2025-01-14\ntech-stack: [TypeScript, Express, PostgreSQL, JWT]\nteam-size: 3\nduration: 4 weeks\n---\n\n# User Authentication System Project Learnings\n\n## Project Overview\n- **Goal**: Secure and scalable user authentication system\n- **Duration**: 2025-01-01 ~ 2025-01-28 (4 weeks)\n- **Team**: 3 people (Backend 2, Frontend 1)\n- **Tech**: TypeScript, Express, PostgreSQL, JWT, bcrypt\n\n## Success Patterns\n[Extracted content from above]\n\n## Issues Encountered\n[Extracted content from above]\n\n## Apply to Next Project\n[Extracted content from above]\n\n## Metrics\n[Collected content from above]\n\n## Compounding Effect\nThis project compared to previous:\n- 30% time reduction\n- 47% fewer issues\n- 62% less fix time\n\nNext project expectations:\n- Additional 20% time reduction (total 50%)\n- Additional 30% fewer issues (total 77%)\n```\n\n### 7. Auto-Update Steering Files\nUpdate related steering files based on learnings:\n\n**Update security-reviewer.md:**\n```markdown\n## Newly Added Checklist Items\n- [ ] Is rate limiting implemented? (Added 2025-01-14)\n- [ ] Are there no N+1 queries? (Added 2025-01-14)\n```\n\n**Update successful-patterns.md:**\n```markdown\n## Newly Added Patterns\n\n### Pattern 13: JWT + Refresh Token (Verified)\n- Project: User Authentication System\n- Date: 2025-01-14\n- Effect: Security ⭐⭐⭐⭐⭐, UX ⭐⭐⭐⭐⭐\n```\n\n### 8. Create Next Project Template\nCreate template based on learnings:\n\n```markdown\n# [Domain] Project Template\n\n## Auto-Included Items (from past learnings)\n- ✅ Rate limiting\n- ✅ N+1 query check\n- ✅ Security checklist\n- ✅ Performance monitoring\n\n## Recommended Architecture\n- JWT + Refresh Token\n- Repository Pattern\n- Middleware Chain\n\n## Warnings\n- Watch for missing rate limiting initially\n- Check for N+1 query possibilities\n```\n\n## Output Format\n\n```\n🎉 Project Learnings Codified!\n\nCreated files:\n✅ .kiro/steering/learnings/2025-01-14-auth-system.md\n\nUpdated files:\n✅ .kiro/steering/reviewers/security-reviewer.md (2 checklist items added)\n✅ .kiro/steering/patterns/successful-patterns.md (1 pattern added)\n\nCompounding Effect:\n📈 30% time reduction vs previous\n📉 47% fewer issues vs previous\n\nNext project expectations:\n🚀 Additional 20% time reduction (total 50%)\n🎯 Additional 30% fewer issues (total 77%)\n\nThese learnings will be automatically applied to your next project!\n```\n\n## Compounding Effect Visualization\n\n```\nProject 1 (Baseline)\n├─ Setup: 2hr\n├─ Issues: 15\n├─ Fix Time: 8hr\n└─ Total: 40hr\n\nProject 2 (Learnings applied)\n├─ Setup: 45min ↓62%\n├─ Issues: 8 ↓47%\n├─ Fix Time: 3hr ↓62%\n└─ Total: 28hr ↓30%\n\nProject 3 (More learnings)\n├─ Setup: 20min ↓83%\n├─ Issues: 3 ↓80%\n├─ Fix Time: 1hr ↓87%\n└─ Total: 20hr ↓50%\n\nProject 4 (Compounding maximized)\n├─ Setup: 10min ↓92%\n├─ Issues: 1 ↓93%\n├─ Fix Time: 30min ↓94%\n└─ Total: 15hr ↓62%\n```\n\n## Usage Tips\n\n1. **Run regularly**: Always run when project completes to record learnings\n2. **Link with retrospectives**: Run after team retrospective meetings to capture discussions\n3. **Track metrics**: Record metrics for each project to measure compounding effect\n4. **Use templates**: Use generated templates when starting next project"
  }
}
