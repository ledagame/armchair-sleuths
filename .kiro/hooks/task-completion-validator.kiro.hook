{
  "enabled": true,
  "name": "Task Completion Validator",
  "description": "Task 완료 시 자동으로 철저한 검수를 수행 (Requirements, Design, Code Quality, Build 검증)",
  "version": "2.0.0",
  "when": {
    "type": "manual"
  },
  "then": {
    "type": "askAgent",
    "prompt": "사용자가 Task 완료를 선언했습니다. 철저한 6단계 검수를 수행하세요.\n\n## 1단계: 문서 수집\n- `.kiro/specs/` 에서 현재 spec 폴더 식별\n- requirements.md, design.md, tasks.md 읽기\n- 완료된 Task 번호 추출\n\n## 2단계: Requirements 충족도 검증\n- tasks.md에서 참조된 Requirements 번호 추출\n- requirements.md에서 각 요구사항 확인\n- 구현 여부 검증 (✅ 완전 / ⚠️ 부분 / ❌ 미구현)\n\n## 3단계: Design 준수도 검증\n- 아키텍처 패턴 준수\n- 데이터 모델 일치\n- 인터페이스 설계 준수\n- 에러 처리 방식 일치\n\n## 4단계: 코드 품질 검증\n- TypeScript 타입 체크: `npx tsc --noEmit --project src/server/tsconfig.json`\n- 코드 구조 (명명 규칙, 함수 길이, 단일 책임)\n- Import/Export 누락 확인\n- 문서화 수준\n\n## 5단계: 빌드 검증\n- `npm run build` 실행\n- 빌드 에러 분석\n- 자동 수정 코드 제공 (Critical 이슈)\n\n## 6단계: 누락 사항 확인\n- 서브태스크 완료 여부\n- 필수 파일 생성 여부\n- 통합 이슈\n\n## 리포트 형식\n\n```markdown\n# 🔍 Task [번호] 완료 검증 리포트\n\n**검증 일시**: [시간]\n**Spec**: [spec 이름]\n\n## 📋 작업 요약\n- Task: [번호 및 제목]\n- 서브태스크: [완료/전체]\n- Requirements: [번호들]\n- 생성 파일: [목록]\n\n## ✅ Requirements 충족도: [X/Y] ([%])\n[각 요구사항별 상세 검증]\n\n## 🏗️ Design 준수도: [X/Y] ([%])\n[아키텍처, 데이터 모델, 인터페이스, 에러 처리]\n\n## 🔧 코드 품질: [X/Y] ([%])\n[타입 안전성, 코드 구조, Import/Export, 문서화]\n\n## 🏗️ 빌드 검증\n[빌드 결과 및 에러 분석]\n\n## 📝 누락 사항: [X개]\n[서브태스크, 파일, 통합]\n\n## 🎯 종합 평가\n- 결과: ✅ 승인 / ⚠️ 조건부 / ❌ 재작업\n- 완성도: [0-100]%\n- 품질 등급: [S/A/B/C/D]\n- 주요 강점: [목록]\n- 개선 필요: [우선순위별 목록]\n\n## 🚀 다음 단계\n- Critical: [즉시 수정]\n- High: [다음 작업 전]\n- Medium: [백로그]\n- 다음 Task 진행: ✅/⚠️/❌\n\n## 📚 학습 및 패턴\n- 배운 점\n- 적용할 패턴\n- 방지할 안티패턴\n```\n\n## 중요 지침\n1. 객관적 검증 (문서 기반)\n2. 구체적 피드백 (위치, 원인, 해결 방법)\n3. 실행 가능한 제안 (Before/After 코드)\n4. 긍정적 톤 (잘된 점 언급)\n5. 명확한 다음 단계\n\n## 우선순위\n- Critical: 빌드 실패, 타입 에러, Requirements 미충족\n- High: Design 미준수, 기능 누락\n- Medium: 코드 품질, 문서화\n\n이제 검증을 시작하세요!"
  }
}
