/**
 * QualityLogger.ts
 * 
 * ÌíàÏßà Í≤ÄÏ¶ù Í≤∞Í≥ºÎ•º Î°úÍπÖÌïòÍ≥† Î©îÌä∏Î¶≠ÏùÑ Ï∂îÏ†ÅÌïòÎäî ÏãúÏä§ÌÖú
 */

import type { QualityMetrics, QualityStatistics, QualityScores, EmotionalState } from './types';

/**
 * QualityLogger ÌÅ¥ÎûòÏä§
 * 
 * ÌíàÏßà Í≤ÄÏ¶ù Í≤∞Í≥ºÎ•º Î©îÎ™®Î¶¨Ïóê Ï†ÄÏû•ÌïòÍ≥† ÌÜµÍ≥ÑÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * Ïã§Ï†ú ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÎÇò Î°úÍπÖ ÏÑúÎπÑÏä§Ïóê Ï†ÄÏû•Ìï¥Ïïº Ìï©ÎãàÎã§.
 */
export class QualityLogger {
  private metrics: QualityMetrics[] = [];
  private maxMetrics = 1000; // Î©îÎ™®Î¶¨Ïóê Ï†ÄÏû•Ìï† ÏµúÎåÄ Î©îÌä∏Î¶≠ Ïàò

  /**
   * ÌíàÏßà Í≤ÄÏ¶ù Í≤∞Í≥º Î°úÍπÖ
   */
  log(metrics: QualityMetrics): void {
    this.metrics.push(metrics);

    // Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨: ÏµúÎåÄ Í∞úÏàò Ï¥àÍ≥º Ïãú Ïò§ÎûòÎêú Í≤É ÏÇ≠Ï†ú
    if (this.metrics.length > this.maxMetrics) {
      this.metrics.shift();
    }

    // ÏΩòÏÜî Î°úÍπÖ (Í∞úÎ∞ú ÌôòÍ≤Ω)
    if (process.env.NODE_ENV === 'development') {
      console.log('üìä Quality Metrics:', {
        timestamp: metrics.timestamp.toISOString(),
        archetype: metrics.archetype,
        emotionalState: metrics.emotionalState,
        isGuilty: metrics.isGuilty,
        passed: metrics.passed,
        overall: metrics.scores.overall,
        feedback: metrics.feedback
      });
    }
  }

  /**
   * Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ ÏÉùÏÑ±
   */
  getStatistics(): QualityStatistics {
    if (this.metrics.length === 0) {
      return this.getEmptyStatistics();
    }

    const totalValidations = this.metrics.length;
    const passedValidations = this.metrics.filter(m => m.passed).length;
    const passRate = passedValidations / totalValidations;

    // ÌèâÍ∑† Ï†êÏàò Í≥ÑÏÇ∞
    const averageScores = this.calculateAverageScores(this.metrics);

    // ÏïÑÌÇ§ÌÉÄÏûÖÎ≥Ñ ÌÜµÍ≥Ñ
    const archetypeBreakdown = this.calculateArchetypeBreakdown();

    // Í∞êÏ†ï ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ
    const emotionalStateBreakdown = this.calculateEmotionalStateBreakdown();

    return {
      totalValidations,
      passRate,
      averageScores,
      archetypeBreakdown,
      emotionalStateBreakdown
    };
  }

  /**
   * ÌäπÏ†ï ÏïÑÌÇ§ÌÉÄÏûÖÏùò ÌÜµÍ≥Ñ
   */
  getArchetypeStatistics(archetype: string): {
    validations: number;
    passRate: number;
    averageScores: QualityScores;
  } | null {
    const archetypeMetrics = this.metrics.filter(m => m.archetype === archetype);

    if (archetypeMetrics.length === 0) {
      return null;
    }

    const validations = archetypeMetrics.length;
    const passed = archetypeMetrics.filter(m => m.passed).length;
    const passRate = passed / validations;
    const averageScores = this.calculateAverageScores(archetypeMetrics);

    return {
      validations,
      passRate,
      averageScores
    };
  }

  /**
   * ÌäπÏ†ï Í∞êÏ†ï ÏÉÅÌÉúÏùò ÌÜµÍ≥Ñ
   */
  getEmotionalStateStatistics(emotionalState: EmotionalState): {
    validations: number;
    passRate: number;
    averageScores: QualityScores;
  } | null {
    const stateMetrics = this.metrics.filter(m => m.emotionalState === emotionalState);

    if (stateMetrics.length === 0) {
      return null;
    }

    const validations = stateMetrics.length;
    const passed = stateMetrics.filter(m => m.passed).length;
    const passRate = passed / validations;
    const averageScores = this.calculateAverageScores(stateMetrics);

    return {
      validations,
      passRate,
      averageScores
    };
  }

  /**
   * ÏµúÍ∑º NÍ∞úÏùò Î©îÌä∏Î¶≠ Ï°∞Ìöå
   */
  getRecentMetrics(count: number = 10): QualityMetrics[] {
    return this.metrics.slice(-count);
  }

  /**
   * Ïã§Ìå®Ìïú Í≤ÄÏ¶ùÎßå Ï°∞Ìöå
   */
  getFailedValidations(): QualityMetrics[] {
    return this.metrics.filter(m => !m.passed);
  }

  /**
   * Î©îÌä∏Î¶≠ Ï¥àÍ∏∞Ìôî (ÌÖåÏä§Ìä∏Ïö©)
   */
  clear(): void {
    this.metrics = [];
  }

  /**
   * ÌèâÍ∑† Ï†êÏàò Í≥ÑÏÇ∞
   */
  private calculateAverageScores(metrics: QualityMetrics[]): QualityScores {
    if (metrics.length === 0) {
      return {
        characterConsistency: 0,
        emotionalAlignment: 0,
        informationContent: 0,
        naturalDialogue: 0,
        overall: 0
      };
    }

    const sum = metrics.reduce(
      (acc, m) => ({
        characterConsistency: acc.characterConsistency + m.scores.characterConsistency,
        emotionalAlignment: acc.emotionalAlignment + m.scores.emotionalAlignment,
        informationContent: acc.informationContent + m.scores.informationContent,
        naturalDialogue: acc.naturalDialogue + m.scores.naturalDialogue,
        overall: acc.overall + m.scores.overall
      }),
      {
        characterConsistency: 0,
        emotionalAlignment: 0,
        informationContent: 0,
        naturalDialogue: 0,
        overall: 0
      }
    );

    return {
      characterConsistency: Math.round(sum.characterConsistency / metrics.length),
      emotionalAlignment: Math.round(sum.emotionalAlignment / metrics.length),
      informationContent: Math.round(sum.informationContent / metrics.length),
      naturalDialogue: Math.round(sum.naturalDialogue / metrics.length),
      overall: Math.round(sum.overall / metrics.length)
    };
  }

  /**
   * ÏïÑÌÇ§ÌÉÄÏûÖÎ≥Ñ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
   */
  private calculateArchetypeBreakdown(): Map<string, {
    validations: number;
    passRate: number;
    averageScores: QualityScores;
  }> {
    const breakdown = new Map();

    // Î™®Îì† ÏïÑÌÇ§ÌÉÄÏûÖ Ï∂îÏ∂ú
    const archetypes = Array.from(new Set(this.metrics.map(m => m.archetype)));

    for (const archetype of archetypes) {
      const stats = this.getArchetypeStatistics(archetype);
      if (stats) {
        breakdown.set(archetype, stats);
      }
    }

    return breakdown;
  }

  /**
   * Í∞êÏ†ï ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
   */
  private calculateEmotionalStateBreakdown(): Map<EmotionalState, {
    validations: number;
    passRate: number;
    averageScores: QualityScores;
  }> {
    const breakdown = new Map();

    const states: EmotionalState[] = ['COOPERATIVE', 'NERVOUS', 'DEFENSIVE', 'AGGRESSIVE'];

    for (const state of states) {
      const stats = this.getEmotionalStateStatistics(state);
      if (stats) {
        breakdown.set(state, stats);
      }
    }

    return breakdown;
  }

  /**
   * Îπà ÌÜµÍ≥Ñ Î∞òÌôò
   */
  private getEmptyStatistics(): QualityStatistics {
    return {
      totalValidations: 0,
      passRate: 0,
      averageScores: {
        characterConsistency: 0,
        emotionalAlignment: 0,
        informationContent: 0,
        naturalDialogue: 0,
        overall: 0
      },
      archetypeBreakdown: new Map(),
      emotionalStateBreakdown: new Map()
    };
  }
}

/**
 * Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
 */
export const qualityLogger = new QualityLogger();
